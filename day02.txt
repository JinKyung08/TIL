DAY02

▣ 자료형(Type,형)
	-메모리에 저장 할 수 있는 값의 형태를 지정
		타입 변수명;
		타입 변수명 = 값;
	-java의 모든 변수, 상수는 언제나 자료형(타입)이 먼저 선언되어야 함
		int number = 3;
		String name;
		name = "홍길동"
	-한 번 정의된(선언된) 자료형에는 다른 자료형을 저장하라 수 없음.
		int number;
		number = 7;
		
		int number; (X)
		double number; (X)  why? 이미 int 타입으로 설정이 되어 있어서 에러
	
	-자료형의 종류
		기본자료형 : 실제 값을 저장하는 것
			          타입	  크기
			정수 :   byte         1byte
			          short        2byte
                                              int           4byte     default	4	
                                              long         8byte		4L

                                    실수 :   float         4byte		0.0f
			          double      8byte	default	0.0
			
			문자 :   char         2byte
		           boolean boolean     true/false

		참조자료형 : 주소를 저장
				String 배열, 클래스, ...

▣ 변수
	-변수선언
		타입 변수명;
		타입 변수명 = 초기값; (가장 많이 쓰임)
		int x;
		int y;
		int z;
		int x,y,z;
		int x=0, y=0, z=0;

		int x=10;
		int y=20;
		int z=30;
		int x=10, y=20, z=30;

   문자열을 초기화 => String str = ""; //null
   문자를 초기화 => Char ch = ''; 에러, 문자열은 ""에러 아님 but 문자는 ''는에러
		  char ch = ' '; // 문자는 ' ' 사이를 한칸 띄우기
   정수를 초기화 => int num = 0;
                          long longNum = 0L; // long은 int와 구분하기 위해서 숫자 뒤에 L을 붙인다.
   실수를 초기화 => double d =0.0;
	              float f = 0.0f;  // double형의 숫자와 float의 숫자를 구분하기 위해 float형 숫자 뒤에는 f를 붙인다.

	-변수 선언시 주의사항
		변수 선언시 반드시 초기화를 해준다. 하지 않으면 쓰레기 값이 들어 같 수 있어 나중에 문제가 됨
		같은 이름으로 변수를 선언할 수 없다.
		//되도록 이면 위쪽 상단 선언부에 한꺼번에 선언한다.

	-변수를 사용하는 이유
		반복되는 값들을 쉽게 관리할 수 있도록 하기위해
		의미 없는 값을 하나의 정보로 만들기 위해 사용

	-변수의 생존 기간
		jvm이 데이터를 삭제시키는 시기
		변수는 자신이 선언된 { } 안에서만 사용 가능 (메서드,제어문,생성자,...)
		실제 단순히 중관호({ }) 내에서 변수를 선언하여 사용

▣ 상수
	-항상 그대로인 수로 한 번만 값을 저장
	-값을 저장할 수 있는 공간이지만, 변수와 달리 한 번 값을 저장하면 다른 값으로 변경할 수 없다.
	-변수의 타입 앞에도 키워드 'final'을 붙이기
	-상수이름은 '대문자'로 처리
	-단어의 조합은 '_'로 연결

	-final 변수타입 대문자상수이름 = 값;
		final int MAX_SPEED = 10;

▣ 리터럴
	int a = 10;
	String name = "홍길동";
		20
	리터럴 => 10 , 홍길동, 20, ...

============

▣ 연산자

1. 산술 연산자
	덧셈 : +
	뺄셈 : -
	곱셉 : *
	나눗셈 : /     , 정수 / 정수 => 정수 (소수점을 구하지 않음, 소수점은 버림) 
		정수/실수 or 실수/정수 or 실수/실수 => 실수값을 얻을 수 있음
	나머지 : %   , 정수 % 정수 => 정수 (만 가능) ex) 7%2=1 

	짝수 : 정수 / 2 == 0
	홀수 : 정수 / 2 == 1
	배수 : 정수 / n == 0 : n의배수
                    정수 / 3 == 0 : 3의배수
	        정수 / 5 == 0 : 5의배수

2. 대입 연산자 
	=    : 오른쪽의 자료를 왼쪽에 담는다
	+=  :     a +=2 => a= a + 2
	-=  :      a -=2 => a= a - 2
	*=  :      a *=2 => a= a * 2 
            /=  :      a /=2 => a= a / 2
		
3. 삼향 연산자
	조건식 ? 조건식의 결과가 참이면 실행할 값 : 조건식의 결과가 거짓이면 실행할 값; : 3개의값
	num % 2 == 0? "짝수" : "홀수";
	score >= 80 ? "합격" : "불합격";

	* 조건식 => 결과가 true/false로 나올 수 있는 식, 또는 true, false

4. 비교연산자
	> : 크다, 초과, 왼쪽에 있는 것이 오른쪽에 있는 것 보다 크다
	>= : 크거나 같다, 이상, 왼쪽에 있는 것이 오른쪽에 있는 것보다 크거나 같다
	< : 작다, 미만
	<= : 작거나 같다, 이하
	== : 같다 왼쪽의 자료와 오른쪽의 자료가 같다
	!= : 같지 않다 , 왼쪽의 자료와 오른쪽의 자료가 다르다

5.단항연산자
	++  : ++a => a = a+1, a+=1
	--   : --a  => a = a-1 , a -= 1

	전위형 : ++a, --a, 나먼저 바꾸고(증가/감소) 계산에 참여
	후위형 : a++, a--, 계산에 먼저 참여하고 계산기 끝난 후 나를 바꾼다(증가/감소)

6.논리 연산자
	결과가 : true/false
	&& : 그리고, 왼쪽과 오른쪽 모두 참일때만 결과가 참
	II : 또는, 왼쪽과 오른쪽 중 단 하나라도 참이면 결과가 참 

	   왼&&	오	결과
	true       true	true
	true 	false	false
	false	true 	false
	false 	false	false
	
	* && 연산에서는 왼쪽의 결과가 false가 나오면 오른쪽은 계산을 안하고 무조건 false로 처리(short circuit)

	*short circuit : 연산 수행시 결과가 이미 확정된 경우 나머지 연산과정을 수행하지 않는 것


               왼 II	오	결과
	true       true	true
	true 	false	true
	false	true 	true
	false 	false	false
 	
	* II 연산에서는 왼쪽의 결과가 true가 나오면 오른쪽은 계산을 안하고 무조건 true로 처리


▣ 스캐너 클래스
	Scanner 참조변수 = new Scanner(System.in);

	nextInt() : 정수를 입력받아 오기
	nextLong() : 정수 Long 형 받기
	nextDouble() : double 형 받기 
	next() : 문자열을 받아오기, 문자열을 스페이스, 또는 Enter
	nextLine() : 문자열, 한줄 단위로 받기, 주소


▣ 타입변환(형변환,Casting)

 1. 기본자료형 간의 타입 변환
	-자바는 =(등호)를 기준으로 왼쪽과 오른쪽의 타입이 일치해야 한다.
 2. 자동 형변환
	-프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것
	-작은 크기를 가지는 타입이 큰 크기를 가지는 타입에 저장될 때 발생

		 byte(1) < short(2) <int(4) < long(8) < float(4)[저장방식다름] < doubla(8)

	- 자동 타입 변환이 발생되면 이전의 값과 벼환 이후의 값은 동일
		즉, 손실 없이 그대로 보존
	-자바에서 정수 연산을 할 경우 jvm은 int타입으로 계산
		byte       연산(+-*/)	byte/short/int ==> int
		short
		int
		
		(byte/short/int/long) 연산(byte/short/int/long) => long
3. 강제 형변환(Casting)
	-형(타입) 변환 연산자를 사용해 데이터 타입을 강제로 변환하는 연산
	-(데이터타입)형태의 타입 변환 연산자를 붙임
	-작은 크기 타입 = (작은크기타입)큰 크기 타입
	
		int a = (int)15.3;

4. 문자열 형변환
	-문자열 어떤 자료형과 묶으면 무조건 문자열
		"가"+10=>가10
		double name = 8.5;
		"나" + name => 나8.5

	-문자열을 일반 자료형
		"10" : 문자열 => 10(정수로 바꾸고싶을때)
		정수값 : Integer.parseInt("10") => 10
			Long.parseLong("10")=>10L
		실수값 : Double.parseDouble("3.7")=>3.7
		           Float.parseFloat("6.3") => 6.3F

5. printf( )
	-""안에 입력
	%d :  10진 정수
	%s : 문자열
	%c : 문자
	%f : 실수

	%5d :  전체자릿수를 5개잡고 오른쪽부터 입력
	%5.2f : 전제차릿수는 5개 잡고 소수이하 둘째자리 까지 표현
	%.2f : 소수이라 둘째자리 까지 표현