# DAY 01
## -- JAVA --
### ▷ 자바 시작하기

**1. 프로그래밍 언어 - java> 프로그래밍 언어**

- 컴퓨터가 이해할 수 있는 명령을 작성하기 위한 도구(언어)
- 프로그램을 만들 수 있는 언어

**2. 프로그래밍 언어가 필요한 이유**

- 프로그래밍 언어는 개발자와 운영체제(컴퓨터)가 소통하기 위한 언어

**3. 컴파일**

- 컴퓨터가 이해할 수 있는 언어는 0, 1 (이진코드) 뿐
- 사람이 이해하기 쉽도록 만들어 놓은 언어를 기계가 이해하기 쉽게 바꾸어
  컴퓨터에 전달하는 것이 필요. 사람의 언어를 컴퓨터 언어로 변환하는 과정

**4. 컴파일러**

- 번역기                                              hello.java      ->       hello.class     ->          JVM   - 기계어
- 컴파일을 해주는 프로그램 또는 명령어(실행 프로그램)  javac.exe(컴파일러)        Java.exe

**5. 프로그램 **

- 개발자와 운영체제가 소통하기 위한 언어
- 일반 프로그램(C언어, C++,...)  운영체제랑 다이렉트로 소통, 대상이 바뀌면 소통이 어려움 
            (이식성이 나쁨)
           * 이식성 : 서로 다른 실행 환경을 가진 시스템 간에 프로그램을 옮겨 실행할 수 있는 것
- java 프로그램 jvm(java virtual machine, 자바가상머신(컴퓨터, 운영체제)이 운연체제에
             맞게 번역해 주기 때문에 이식성이 좋음 (플램폼에 독립적) 

**6. 운영체제/ 하드웨어**

- 운영체제(OS) : 하드웨어와 소프트웨어의 다리 역할
- 하드웨어
               cpu(중앙처리장치, 프로세서) : 연산장치, 제어장치, 레지스터 
               주기억장치(RAM, 책상과 같은 역할) : 컴퓨터로 일을 처리하기 위해 올려 놓는 공간
                             ROM (like 의식주) : 기본적인 사항들을 담고 있음
                             * 메모리 알아보기
               보조기억장치 : 하드디스크(HDD,SSD), usb, ...

**7. 소스코드**

- 명령어를 작성해 놓은 것
- 운영체제와 개발자 소통한 것을 글로 작성해 놓은 것 

============================================================================

### ▷ 자바 개발도구와 실행 환경

**1. JDK(Java Development Kit)**

- 자바를 이용해 프로그램을 개발하는 데 필요한 도구를 모아 둔 집합
- jre 외에 개발에 필요한 도구들을 가지고 있음
- 컴파일 명령어와 실행 명령어를 담고 있음 

**2. JRE(Java Runtime Environment)**

- 완성된 프로그램을 실행하는 데 필요한 환경
- jdk를 가져와 프로그램을 완성하고 jre위에서 실행하면 프로그램이 돌아가는 것 

**3. JVM(Java Virtual Machine, 자바가상운영체제(컴퓨터))**


- java 프로그램을 실행해 줌

- 실제 운영체제를 대신해서 자바 프로그램을 실행하는 가장 운영체제 역할

* 자바 소스코드     ->   바이트 코드(클래스파일)   ->  jvm  -> 실행파일(기계어) -> 실행
   Hello.java       컴파일        Hello.class                                    Hello.exe
                          javac.exe                                          java.exe

============================================================================

### ▷개발도구 설치 

        1) 설치위치
               C:\java\jdk-11.0.16\
        2) 환경변수 설정
               내pc -> 마우스 오른쪽 : 속성 -> 시스템 -> 소급시스템설정 -> 고급
                          환경변수 : 아래쪽(시스템변수) -> 새로만들기 : 변수이름  >> JAVA_HOME
                                                                  변수값: C:\java\jdk-11.0.16
              
               PATH : 운영체제가 파일의 위치(디렉토리, 폴더) 파악하는데 사용하는 경로(Path)
                       경로를 설정하면 해당 디렉토리에 포함된 파일을 파일 경로없이 파일 이름만
                       으로도 사용할 수 있게 만든다.
               path : 아래쪽(시스템변수) -> path : 편집 -> 새로 만들기 -> %JAVA_HOME%\bin
    
        3) 설치 확인
               cmd창에서 : javac _version
                               java _version



### ▷ 통합개발환경(IDE : Intergrated Development Environment)
              - vs code, 이클립스, 인텔리제이

**1.이클립스**

**2. 환경설정**
            - window - preference
                    font : Colors and Fonts - Basic - Text Font : Edit
                    encoding : workspace- 맨아래 Text file - encoding -other : utf-8
                    버전변경 : complie - compiler - compiler compliance level :11

========================================================================

### ▷ 자바 기본 구조

           프로젝트              : Alt + Shift + N
                     패키지           : 첫 글자는 소문자
                             클래스      : 첫 글자가 대문자  : ctrl + N (자바는 모두 클래스 안에서 실행됨)
    				                          모든 소스코드는 클래스의 { } 안에서 작성
                                      메소드     : 첫 글자가 소문자 마지막 () /  ex: add( ) -> method
                                             소스코드   

========================================================================

**1.주석**

- 설명글 : 실행에는 영향을 주지 않음 
	     범위주석 /*   주석글  */     , 부분부분 검토하고 싶을때 필요없는 부분을 일지적으로 주석으로 만들기
       한줄주석  // 주석글 , ctrl + /

* 이클립스는 저장을 하면 자동으로 컴파일이 진행됨

**2.단축키**

- 글자일부 입력 + ctrl + spacebar : 자동완성
   sysout ctrl + spacebar => system. out - println();
- 실행: ctrl +F11
-  복사 : 복사할 위치에 커서 놓거나 범위를 설정한 후 ctrl+alt + 방향키(위/아래)
-  이동: 이동할 위치에 커서 놓거나 범위를 설정한 후 alt + 방향키(위/아래)
-  한줄 삭제 : Ctrl + D 
-  소스코드 정리 : ctrl + A(전체선택) -> ctrl +shift + F (소스코드를 보기 좋게 정리)

**3.출력 메소드**

-  println() : ()안에 내용을 출력하고 줄바꿈
-  print() : () 안에 있는 내용을 출력만 하고 줄바꿈하지 않음
-  printf() : 포맷(서식문자)를 사용하여 출려하고 할때 사용, 줄바꿈하지 않음

**4.출력 메소드를 쓰는 이유**

-  결과 확인 
-  전달받은 데이터 및 전달할 데이터를 검사
-  오류 발생하는 지점을 구체화하고 검사할 목적 

* 컴파일러는 실행을 위해 해성을 할 때 위에서 아래로, 왼쪽에서 오른쪽으로 해석하면 실행

**5.문자열과 숫자, 문자**

-    " "- 문자열 "3"-문자열3
-    ' '-문자      '3'- 문자 3  
-    3 - 숫자
-    name - 변수
-   "name"- 문자열       

**6. ; - 문장의 끝**

 자바는  ;이 없으면 문장이 끝났다고 생각하지 않는다.

**7. 제어문자**

-  반드시 " " 안에 넣는다
-  \n : new line, 줄바꿈
-  \t : tab, 일정한 간격을 띄우기(누로 위/아래 간격을 맞퉈 주고 싶을 때)
-  \ \" : "
-  \\ \' : '
-  \\ \ : \

**8. 문자열 연결 연산자(+)**
- 10 + 20 => 30
- "10" + 20=> 1020 , 문자열 + 숫자 => 문자열로 처리
- 10 + 20 + "가" => 30가
- "가" + 10+ 20 => 가1020

**9. 개발자간의 관례 - 명명 규칙**
- 클래스명 : 첫 글자는 반드시 대문자로
  클래스명 제되한 것은 : 첫 글자를 소문자로

- 캐멀케이스 : 두단어 이상이 조합되었을 때 단어의 두 번째 단어부터 첫글자는 대문자로 
	showInfoVariable()
	TestExamVariable

- 스네이크 케이스 : 두단어 이상이 조합되었을 때 단어 사이를  _로 묶는다.
	show_info_variable()
	test_exam_variable()

- 헝가리언 표기법 : 단어 앞에 자료형을 붙여서 어떤 타입(자료형)인지 알려준다.
	intAge   :  정수형
            dSpeed  :  실수형

- 모든 이름은 문자로 시작한다. 숫자나 특수문자로 시작 할 수 없다.
	단, _는 가능, -는 특수문자
- 특수문자를 사용할 수 없다. 
    test3 (가능)
	3test (불가능)
	sample$3(불가능)
- 이름에는 공백문자를 사용할 수 없다.
   sample test (불가능)
   공백은 특수문자다

**10. 변수(variable)**

**1) 변수의 정의**

​		'**하나의 값**'을 저장할 수 있는 저장 공간
​		값을 저장할 수 있는 메모리의 특정 번지에 붙여진 이름

​        num = 10; // 저장공간
​        num 이라는 저장공간의 이름에 10이라는 값을 담겠다. 
​        num이라는 이름의 저장공간이 RAM에 할당(만들어지고)되고 10이라는 값이 들어간다.
​	
​        System.out.println(num);  // 값

**2) 자료형(type, 형) - 어떤 자료를 담을 그릇**

​    메모리에 저장할 수 있는 값의 형태를 지정

​    타입 변수이름 = 값;
​    타입 변수이름;

​    -기본자료형 : byte, short, int, long, float, double, boolean, char

​	-참조자료형 : 기본 자료형을 제외한 자료형
​            String, 배열, 클래스,...